|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------- REACT NATIVE PASO A PASO -------------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||                                                                                                                                                    |||
||| -- 01.  PREPARAR EL ENTORNO DE DESARROLLO                                                                                                          |||
||| -- 02.  CREAR UNA APP                                                                                                                              |||
||| -- 03.  COMPONENTES CENTRALES                                                                                                                      |||
||| -- 04.  NAVEGACIÓN ENTRE PANTALLAS                                                                                                                 |||
||| -- 05.  PATRÓN DE DISEÑO MVVM. CONVENCIONES DE GOOGLE                                                                                              |||
||| -- 06.  MONTANDO UN SERVIDOR NODE JS                                                                                                               |||
||| -- 07.  CONECTANDO A LA BASE DE DATOS (MYSQL)                                                                                                      |||
||| -- 08.  AJUSTANDO EL PROYECTO A MVVM                                                                                                               |||
||| -- 09.  JSON WEB TOKEN                                                                                                                             |||
||| -- 10.  CUSTOM HOOKS                                                                                                                               |||
||| -- 11.  DESPLEGAR UN PROYECTO                                                                                                                      |||
|||                                                                                                                                                    |||
||| -- AUTOR:           ADAPTACIÓN hecha por el Instructor ALBEIRO RAMOS. SENA, 2025; del Taller CORREGIDO por el Instructor MAURICIO LARA. SENA, 2024;|||
|||                     del ORIGINAL elaborado por el Instructor MARCO LEÓN MORA. SENA, 2023.                                                          |||
||| -- BIBLIOGRAFÍA:    CORREGIDO:  https://github.com/ProfeAlbeiro/react_native/blob/main/sources/docs/taller_react_native.docx                       |||
|||                     ORIGINAL:   https://github.com/ProfeAlbeiro/react_native/blob/main/sources/docs/info_back/taller%20React%20Native_1.docx       |||
|||                                                                                                                                                    |||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------ 01. PREPARAR EL ENTORNO DE DESARROLLO -------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.01.  Crear la carpeta para los proyectos REACT NATIVE: -------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Crear una carpeta denominada 'react_native' en el 'Escritorio'. Esta carpeta será la raíz de los proyectos de REACT NATIVE.

                    ⦿   'Escritorio/react_native'.


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.02.  Instalar Visual Studio Code: ----------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'Visual Studio Code': https://code.visualstudio.com/download.

            02. Instalar Visual Studio Code.

                    ⦿   En el asistente de instalación dejar marcado:   ☑ “Agregar PATH…”.

            03. Abrir Visual Studio Code y asociar la carpeta 'Escritorio/react_native' del punto '01.01.01.'.

            04. Instalar las siguientes extensiones en Visual Studio Code:

                    ⦿   ES7 React/Redux/React-Native snippets
                    ⦿   Simple React Snippets
                    ⦿   Auto Close Tag
                    ⦿   Paste JSON as Code
                    ⦿   TypeScript importer

            06. Abrir una 'Terminal' en Visual Studio Code:

                    ⦿   'Terminal / New Terminal' ó 'Ctrl + Shift + ñ'


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.03.  Instalar node.js: ---------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'node.js': https://nodejs.org/es/.

                    ⦿   Descargar la última version LTS

            02. Instalar node.js.

            03. En la terminal de 'Visual Studio Code' digitar el siguiente comando para ver las directivas de ejecución de cada ámbito en orden de
                prioridad:

                    ⦿   PS C:\..\react_native> Get-ExecutionPolicy
                    ⦿   Restricted

            NOTA:   ⦿   Si aparece 'Restricted', hay que cambiarla a 'Unrestricted' de la siguiente forma

                    ⦿   PS C:\..\react_native> Set-ExecutionPolicy -Scope CurrentUser

                         cmdlet Set-ExecutionPolicy en la posición 1 de la canalización de comandos
                         Proporcione valores para los parámetros siguientes:
                         ExecutionPolicy: Unrestricted

            04. Verificar la versión de 'node.js' y 'npm' en la terminal de 'Visual Studio Code':

                    ⦿   PS C:\..\react_native> node --version
                    ⦿   PS C:\..\react_native> npm --version


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.04.  Instalar Postman: ---------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'Postman': https://www.postman.com/downloads/. Este programa nos sirve para realizar probar las peticiones HTTP.

            02. Instalar 'Postman'.


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.05.  Instalar Android Studio: --------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'Android Studio': https://developer.android.com/studio?hl=es-419.

                    ⦿   Descargar la versión más reciente.

            02. Instalar Android Studio.

                    ⦿   Dejar habilitado:   ☑ 'Android Virtual Device'.
                    ⦿   Dar clic a 'Don't send' / 'Next' / 'Next' / '☑ Acepto' / 'Finalizar'.

            NOTA:   ⦿   Si la instalación no sale como se espera porque hay una versión de Android Studio instalada, revise el siguiente enlace para
                         desinstalarla totalmente y repita los pasos 01 y 02:

                            https://blog.buhoos.com/como-desinstalar-completamente-android-studio-de-windows-10/

                    ⦿   En caso que los archivos y/o carpetas no se dejen eliminar, descargue el siguiente programa y siga las instrucciones para
                         eliminar las carpetas o archivos. Repita los pasos 01 y 02:

                            https://www.iobit.com/es/recommend/imffree.php?name=iobit_unlocker


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.06.  Configurar las 'Variables de entorno del sistema': ------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Buscar en el menú Windows 'Editar las variables de entorno del sistema' para enrutar al SDK de Java y Android SDK

            02. Dar clic en 'Variables de entorno…'

            03. En las 'Variables del sistema' dar clic en 'Nueva...'

                    ⦿   Nombre de la variable:  JAVA_HOME
                    ⦿   Valor de la variable:   'Examinar Directorio': C:\Program Files\Android\Android Studio\jbr\bin

                    ⦿   Nombre de la variable:  ANDROID_HOME
                    ⦿   Valor de la variable:   'Examinar Directorio': C:\Users\{usuario_del_sistema}\AppData\Local\Android\Sdk


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.07.  Crear el Emulador en Android Studio: --------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir Android Studio

            02. Seleccionar 'More Actions / Virtual Device Manager'

            03. Seleccionar la opción '(+) Create Virtual Device' y buscar un emulador que tenga los servicios de Google Service para probar las
                aplicaciones sin restricciones

            04. Seleccionar, por ejemplo, 'Pixel 4' con el icono de Play Store

            05. Dar clic a 'Next' / descargar una versión, por ejemplo, 'Tiramisu'. Dar clic en el botón de descarga para obtener la API

            06. Dejar las opciones por defecto y dar clic a 'Finish' / 'Next' / 'Finish'.

            07. Ejecutar el Emulador dando clic en la punta de flecha (columna 'Actions', la primera vez demorará más tiempo)

            08. Se ha instalado el emulador


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.08.  Instalar Expo CLI: --------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            Expo CLI es una interfaz de línea de comandos que permite montar un servidor para correr el proyecto localmente, construir proyectos
            sencillos y publicarlos. Para más información:

                    ⦿   https://docs.expo.dev/more/expo-cli/
                    ⦿   https://gist.github.com/mrcodedev/37b463ae63c0c1d762e6efaf4c26af4f
                    ⦿   https://blog.expo.dev/the-new-expo-cli-f4250d8e3421

            01. En la terminal de 'Visual Studio Code', instalar Expo CLI:

                    ⦿   PS C:\..\react_native> npm install -g expo-cli exp
                                            ó
                    ⦿   PS C:\..\react_native> npm install -g react-native-cli

            02. Verificar la versión de expo CLI en la terminal de 'Visual Studio Code':

                    ⦿   PS C:\..\react_native> expo  --version

            NOTA:   ⦿   Si ya tiene un proyecto, reemplace en el archivo “package.json”:

                            ⦿   "scripts":{ "start": "expo start"}, por "scripts":{ "start": "npx expo start"}
                            ⦿   "scripts":{ "start": "expo start"}, por "scripts":{ "start": "npx expo start"}

                    ⦿   En caso de existir problema, puede desinstalar expo CLI en la terminal de 'Visual Studio Code':

                            ⦿   PS C:\..\react_native> npm uninstall -g expo-cli

                    ⦿   Con el objeto de verificar posibles conflictos de puertos, que se puedan presentar más adelante en el desarrollo de la App,
                         puede listar los puertos utilizados en Windows desde la consola, con el comando 'netstat -ano'.



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||---------------------------------------------------------------- 02. CREAR UNA APP -----------------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.01.  Crear la aplicación en REACT NATIVE: --------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Obtener los comandos TypeScript a ejecutar: https://reactnative.dev/docs/typescript.

            02. En la terminal de 'Visual Studio Code', crear el proyecto:

                    ⦿   PS C:\..\react_native> npx create-expo-app --template

                         Need to install the following packages:
                         create-expo-app@3.2.0
                         Ok to proceed? (y) y

                         √ Choose a template: » Blank (TypeScript)
                         √ What is your app named? ... my-app
                         √ Downloaded and extracted project files.
                         > npm install


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.02.  Ejecutar 'my-app' en el emulador de Android: ------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En la terminal de 'Visual Studio Code', ejecutar los siguientes comandos:

                    ⦿   PS C:\..\react_native> cd my-app
                    ⦿   PS C:\..\react_native\my-app> npm run android

            NOTA:   ⦿   Tener en cuenta los siguientes comandos de 'Expo Go'. En la Terminal de 'Visual Studio Code' puede ejecutar:

                              › Using Expo Go
                              › Press s │ switch to development build

                              › Press a │ open Android
                              › Press w │ open web

                              › Press j │ open debugger
                              › Press r │ reload app
                              › Press m │ toggle menu
                              › shift+m │ more tools
                              › Press o │ open project code in your editor

                              › Press ? │ show all commands

                              Logs for your project will appear below. Press Ctrl+C to exit.

                              › Using Expo Go
                              › Press s │ switch to development build

                              › Press a │ open Android
                              › shift+a │ select an Android device or emulator
                              › Press w │ open web

                              › Press r │ reload app
                              › Press j │ open debugger
                              › Press m │ toggle menu
                              › shift+m │ more tools
                              › Press o │ open project code in your editor
                              › Press c │ show project QR

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.03.  Ejecutar 'my-app' en un dispositivo físico Android: -----------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En el dispositivo, ir a tienda, para Android es Play Store, buscar 'Expo go' e instalarla.

            02. En la terminal de 'Visual Studio Code', ejecutar:

                    ⦿   PS C:\..\react_native\my-app> expo start

            03. Si le solicita dependencias adicionales, pulsar 'Y' para instalarlas. Se generará un código QR.

            04. Abrir la aplicación 'Expo Go' en el dispositivo.

            05. Escanear el 'código QR' con el dispositivo. Los dos equipos deben estar en la misma red WiFi.


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.04.  'my-app/App.tsx' y ¡Hola Mundo!: ------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            El módulo principal, que se ejecuta al lanzar la aplicación es 'App.tsx', donde se encuentran las 'View' que son las diferentes
            pantallas donde se realiza la navegación. Dentro de los 'View' hay componentes. Los 'View' se relacionan con 'styles', que son los
            estilos aplicados a cada vista.

            01. Modificar el código del archivo 'App.tsx', para agregar el texto '¡Hola Mundo!':

                    01   import { StatusBar } from 'expo-status-bar';
                    02   import { StyleSheet, Text, View } from 'react-native';
                    03
                    04   export default function App() {
                    05     return (
                    06       <View style={styles.container}>
                    07         <Text>¡Hola Mundo!</Text>
                    08         <StatusBar style="auto" />
                    09       </View>
                    10     );
                    11   }
                    12
                    13   const styles = StyleSheet.create({
                    14     container: {
                    15       flex: 1,
                    16       backgroundColor: '#fff',
                    17       alignItems: 'center',
                    18       justifyContent: 'center',
                    19     },
                    20   });


|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------ 03. COMPONENTES CENTRALES -------------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.01.  Ventana de inicio: --------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Consultar los componentes para construir el código: https://reactnative.dev/docs/components-and-apis.

            02. Descargar las siguientes imágenes: https://github.com/ProfeAlbeiro/react_native/tree/main/sources/img/assets en la carpeta 'assets' de
                'my-app'.


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.02.  Imagen de Fondo: ----------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Modificar el código del archivo 'App.tsx', para agregar una imagen de fondo:

                    01   import { StatusBar } from 'expo-status-bar';
                    02   import { StyleSheet, Text, View, Image } from 'react-native';
                    03
                    04   export default function App() {
                    05     return (
                    06       <View style={styles.container}>
                    07         <Image
                    08           source={ require('./assets/chef.jpg')}
                    09           style={styles.imageBackground}
                    10         />
                    11       </View>
                    12     );
                    13   }
                    14
                    15   const styles = StyleSheet.create({
                    16     container: {
                    17       flex: 1,
                    18       backgroundColor: '#fff',
                    19     },
                    20     imageBackground: {
                    21         width: '100%',
                    22         height: '100%',
                    23     },
                    24   });

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.03.  Logo: ---------------------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Modificar el código del archivo 'App.tsx', para agregar un logo:

                    01   import { StatusBar } from 'expo-status-bar';
                    02   import { StyleSheet, Text, View, Image } from 'react-native';
                    03
                    04   export default function App() {
                    05     return (
                    06       <View style={styles.container}>
                    07         <Image
                    08           source={ require('./assets/chef.jpg')}
                    09           style={styles.imageBackground}
                    10         />
                    11         <View style={styles.logoContainer}>
                    12           <Image
                    13             source={require('./assets/logo.png')}
                    14             style={styles.logoImage}
                    15           />
                    16           <Text style={styles.logoText}>FOOD APP</Text>
                    17         </View>
                    18       </View>
                    19     );
                    20   }
                    21
                    22   const styles = StyleSheet.create({
                    23     container: {
                    24       flex: 1,
                    25       backgroundColor: '#fff',
                    26     },
                    27     imageBackground: {
                    28         width: '100%',
                    29         height: '100%',
                    30     },
                    31     logoContainer:{
                    32       position: 'absolute',
                    33       alignSelf: 'center',
                    34       top: '15%',
                    35     },
                    36     logoImage: {
                    37       width: 100,
                    38       height: 100,
                    39     },
                    40     logoText: {
                    41       color: 'white',
                    42       textAlign: 'center',
                    43       fontSize: 20,
                    44       marginTop: 10,
                    45       fontWeight: 'bold',
                    46     },
                    47   });


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.04.  Formulario de Ingreso: ----------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Modificar el código del archivo 'App.tsx', para agregar un Formulario de Ingreso:

                    01   import { StatusBar } from 'expo-status-bar';
                    02   import { StyleSheet, Text, View, Image } from 'react-native';
                    03
                    04   export default function App() {
                    05     return (
                    06       <View style={styles.container}>
                    07         <Image
                    08           source={ require('./assets/chef.jpg')}
                    09           style={styles.imageBackground}
                    10         />
                    11         <View style={styles.logoContainer}>
                    12           <Image
                    13             source={require('./assets/logo.png')}
                    14             style={styles.logoImage}
                    15           />
                    16           <Text style={styles.logoText}>FOOD APP</Text>
                    17         </View>
                    18         <View style={styles.form}>
                    19         </View>
                    20       </View>
                    21     );
                    22   }
                    23
                    24   const styles = StyleSheet.create({
                    25     container: {
                    26       flex: 1,
                    27       backgroundColor: '#fff',
                    28     },
                    29     imageBackground: {
                    30         width: '100%',
                    31         height: '100%',
                    32     },
                    33     logoContainer:{
                    34       position: 'absolute',
                    35       alignSelf: 'center',
                    36       top: '15%',
                    37     },
                    38     logoImage: {
                    39       width: 100,
                    40       height: 100,
                    41     },
                    42     logoText: {
                    43       color: 'white',
                    44       textAlign: 'center',
                    45       fontSize: 20,
                    46       marginTop: 10,
                    47       fontWeight: 'bold',
                    48     },
                    49     form: {
                    50       width: '100%',
                    51       height: '40%',
                    52       backgroundColor: 'white',
                    53       position: 'absolute',
                    54       bottom: 0,
                    55       borderTopLeftRadius: 40,
                    56       borderTopRightRadius: 40,
                    57       padding: 30,
                    58     },
                    59   });


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.05.  Elementos del Formulario: -------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Modificar el código del archivo 'App.tsx', para agregar elementos al Formulario de Ingreso:

                    01   import { StatusBar } from 'expo-status-bar';
                    02   import { StyleSheet, Text, View, Image, TextInput, Button, ToastAndroid } from 'react-native';
                    03
                    04   export default function App() {
                    05     return (
                    06       <View style={styles.container}>
                    07         <Image
                    08           source={require('./assets/chef.jpg')}
                    09           style={styles.imageBackground}
                    10         />
                    11         <View style={styles.logoContainer}>
                    12           <Image
                    13             source={require('./assets/logo.png')}
                    14             style={styles.logoImage}
                    15           />
                    16           <Text style={styles.logoText}>FOOD APP</Text>
                    17         </View>
                    18         <View style={styles.form}>
                    19           <Text style={styles.formText}>INGRESAR</Text>
                    20           <View style={styles.formInput}>
                    21             <Image style={styles.formIcon}
                    22               source={require('./assets/email.png')}
                    23             />
                    24             <TextInput
                    25               style={styles.formTextInput}
                    26               placeholder='Correo electrónico'
                    27               keyboardType='email-address'
                    28             />
                    29           </View>
                    30           <View style={styles.formInput}>
                    31             <Image style={styles.formIcon}
                    32               source={require('./assets/password.png')}
                    33             />
                    34             <TextInput
                    35               style={styles.formTextInput}
                    36               placeholder='Contraseña'
                    37               keyboardType='default'
                    38               secureTextEntry={true}
                    39             />
                    40           </View>
                    41           <View style={{ marginTop: 30 }}>
                    42             <Button
                    43               title='ENVIAR'
                    44               onPress={() => ToastAndroid.show('CLICK', ToastAndroid.LONG)}
                    45               color={'orange'}
                    46             />
                    47           </View>
                    48           <View style={styles.formRegister}>
                    49             <Text>¿No tienes cuenta?</Text>
                    50             <Text style={styles.formRegisterText}>Regístrate</Text>
                    51           </View>
                    52         </View>
                    53       </View>
                    54     );
                    55   }
                    56
                    57   const styles = StyleSheet.create({
                    58     container: {
                    59       flex: 1,
                    60       backgroundColor: 'black',
                    61     },
                    62     imageBackground: {
                    63       width: '100%',
                    64       height: '100%',
                    65       opacity: 0.7,
                    66       bottom: '30%',
                    67     },
                    68     logoContainer: {
                    69       position: 'absolute',
                    70       alignSelf: 'center',
                    71       top: '15%',
                    72     },
                    73     logoImage: {
                    74       width: 100,
                    75       height: 100,
                    76     },
                    77     logoText: {
                    78       color: 'white',
                    79       textAlign: 'center',
                    80       fontSize: 20,
                    81       marginTop: 10,
                    82       fontWeight: 'bold',
                    83     },
                    84     form: {
                    85       width: '100%',
                    86       height: '40%',
                    87       backgroundColor: 'white',
                    88       position: 'absolute',
                    89       bottom: 0,
                    90       borderTopLeftRadius: 40,
                    91       borderTopRightRadius: 40,
                    92       padding: 30,
                    93     },
                    94     formText: {
                    95       fontWeight: 'bold',
                    96       fontSize: 16,
                    97     },
                    98     formIcon: {
                    99       width: 25,
                   100       height: 25,
                   101       marginTop: 5,
                   102     },
                   103     formInput: {
                   104       flexDirection: 'row',
                   105       marginTop: 30,
                   106     },
                   107    formTextInput: {
                   108      flex: 1,
                   109       borderBottomWidth: 1,
                   110       borderBottomColor: '#AAAAAA',
                   111       marginLeft: 15,
                   112    },
                   113    formRegister: {
                   114      flexDirection: 'row',
                   115      justifyContent: 'center',
                   116      marginTop: 20,
                   117    },
                   118    formRegisterText: {
                   119      fontStyle: 'italic',
                   120      color: 'orange',
                   121      borderBottomWidth: 1,
                   122      borderBottomColor: 'orange',
                   123      fontWeight: 'bold',
                   124      marginLeft: 10,
                   125    },
                   126  });


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.05.  Elementos Personalizados: -------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Crear una carpeta 'src' dentro de la carpeta principal

            02. Dentro de 'src' crear la carpetas 'components

            03. Dentro de 'components' crear un archivo 'RoundedButton.tsx'

            04. En el archivo 'RoundedButton.tsx' digitar 'rafc' y aceptar el snippet:

                    01   import React from 'react'
                    02
                    03   export const RoundedButton = () => {
                    04     return (
                    05       <div>RoundedButton</div>
                    06     )
                    07   }

            05. Modificar el archivo 'RoundedButton.tsx', para habilitar el evento 'onPress' y agregar estilos:

                    01   import React from 'react'
                    02   import { TouchableOpacity, Text, StyleSheet } from 'react-native'
                    03
                    04   export const RoundedButton = () => {
                    05       return (
                    06           <TouchableOpacity
                    07               style={styles.RoundedButton}
                    08               onPress={() => { }}
                    09           >
                    10               <Text style={styles.textButton} >ENVIAR</Text>
                    11           </TouchableOpacity>
                    12       )
                    13   }
                    14
                    15   const styles = StyleSheet.create({
                    16       RoundedButton: {
                    17           width: '100%',
                    18           height: 40,
                    19           backgroundColor: 'orange',
                    20           alignItems: 'center',
                    21           justifyContent: 'center',
                    22           borderRadius: 10,
                    23       },
                    24       textButton: {
                    25           color: 'white',
                    26       }
                    27   });

            06. En el archivo 'App.tsx', eliminar la etiqueta 'Button' y cambiar por el elemento personalizado::

                    01   import { StatusBar } from 'expo-status-bar';
                    02   import { StyleSheet, Text, View, Image, TextInput, Button, ToastAndroid } from 'react-native';
                    03   import { RoundedButton } from './src/componentes/RoundedButton';
                    04
                    05   export default function App() {
                    06     return (
                    07       <View style={styles.container}>
                    08         <Image
                    09           source={require('./assets/chef.jpg')}
                    10           style={styles.imageBackground}
                    11         />
                    12         <View style={styles.logoContainer}>
                    13           <Image
                    14             source={require('./assets/logo.png')}
                    15             style={styles.logoImage}
                    16           />
                    17           <Text style={styles.logoText}>FOOD APP</Text>
                    18         </View>
                    19         <View style={styles.form}>
                    20           <Text style={styles.formText}>INGRESAR</Text>
                    21           <View style={styles.formInput}>
                    22             <Image style={styles.formIcon}
                    23               source={require('./assets/email.png')}
                    24             />
                    25             <TextInput
                    26               style={styles.formTextInput}
                    27               placeholder='Correo electrónico'
                    28               keyboardType='email-address'
                    29             />
                    30           </View>
                    31           <View style={styles.formInput}>
                    32             <Image style={styles.formIcon}
                    33               source={require('./assets/password.png')}
                    34             />
                    35             <TextInput
                    36               style={styles.formTextInput}
                    37               placeholder='Contraseña'
                    38               keyboardType='default'
                    39               secureTextEntry={true}
                    40             />
                    41           </View>
                    42           <View style={{ marginTop: 30 }}>
                    43             <RoundedButton />
                    44           </View>
                    45           <View style={styles.formRegister}>
                    46             <Text>¿No tienes cuenta?</Text>
                    47             <Text style={styles.formRegisterText}>Regístrate</Text>
                    48           </View>
                    49         </View>
                    50       </View>
                    51     );
                    52   }
                    53
                    54 > const styles = StyleSheet.create({
                   124   });


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.06.  Pasando parámetros al componente: -----------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Modificar el archivo 'RoundedButton.tsx', para insertar una interface (Por convención se llama 'Props') y usarla en 'RoundedButton':

                    01   import React from 'react'
                    02   import { TouchableOpacity, Text, StyleSheet } from 'react-native'
                    03
                    04   interface Props {
                    05       text: string;
                    06       onPress: () => void,
                    07   }
                    08
                    09   export const RoundedButton = ({ text, onPress}: Props) => {
                    10       return (
                    11           <TouchableOpacity
                    12               style={styles.RoundedButton}
                    13               onPress={() => onPress()}
                    14           >
                    15               <Text style={styles.textButton} >{ text}</Text>
                    16           </TouchableOpacity>
                    17       )
                    18   }
                    19
                    20   const styles = StyleSheet.create({
                    21       RoundedButton: {
                    22           width: '100%',
                    23           height: 40,
                    24           backgroundColor: 'orange',
                    25           alignItems: 'center',
                    26           justifyContent: 'center',
                    27           borderRadius: 10,
                    28       },
                    29       textButton: {
                    30           color: 'white',
                    31       }
                    32   });

            02. Modificar archivo 'App.tsx', para pasar los parámetros en la etiqueta '<RoundedButton />':

                    42   <View style={{ marginTop: 30 }}>
                    43     <RoundedButton text='ENVIAR' onPress={() => ToastAndroid.show('¡HOLA!', ToastAndroid.SHORT)}/>
                    44   </View>


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.07.  Crear estilos globales: ---------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Dentro de la carpeta 'src' crear una carpeta 'theme' y dentro de esta el archivo 'AppTheme.tsx':

            02. Modificar el archivo 'AppTheme.tsx', con el siguiente código:

                    01   import { StyleSheet } from "react-native";
                    02
                    03   export const MyColors = {
                    04       background: '#EEEEEE',
                    05       primary: '#F4991A',
                    06       secondary: '# E14D2A',
                    07   }

            03. Modificar el archivo 'RoundedButton.tsx', para cambiar el color de fondo (línea 3 y 24):

                    03   import { MyColors } from '../theme/AppTheme';

                    21     RoundedButton: {
                    22         width: '100%',
                    23         height: 40,
                    24         backgroundColor: MyColors.primary,
                    25         alignItems: 'center',
                    26         justifyContent: 'center',
                    27         borderRadius: 10,
                    28     },


|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||---------------------------------------------------------- 04. NAVEGACIÓN ENTRE PANTALLAS ----------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.01.  Navegación entre pantallas: -----------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir una nueva 'Terminal' en Visual Studio Code:

                    ⦿   'Terminal / New Terminal' ó 'Ctrl + Shift + ñ'

            02. En la Terminal de 'Visual Studio Code' ejecutar los siguientes comandos:

                    ⦿   PS C:\..\react_native> cd my-app
                    ⦿   PS C:\..\react_native\my-app> npm install @react-navigation/native @react-navigation/native-stack
                    ⦿   PS C:\..\react_native\my-app> npm install -g expo-cli exp


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.02.  Separando las pantallas: --------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Crear en la carpeta 'src' la carpeta 'views' y dentro, otra carpeta 'home' con el archivo 'Home.tsx'

            02. En el archivo 'Home.tsx' digitar 'rafc' y aceptar el snippet:

                    01   import React from 'react'
                    02
                    03   export const HomeScreen = () => {
                    04     return (
                    05       <div>Screen</div>
                    06     )
                    07   }

            03. En el archivo 'App.tsx', seleccionar y cortar el código desde el 'return' hasta antes del cierre de la función 'App()' y pegar en
                'Home.tsx', cambie las rutas de las imágenes, al final quedará así:

                    01   import React from 'react';
                    02   import { StyleSheet, Text, View, Image, TextInput, Button, ToastAndroid } from 'react-native';
                    03   import { RoundedButton } from '../../componentes/RoundedButton';
                    04
                    05   export const HomeScreen = () => {
                    06     return (
                    07         <View style={styles.container}>
                    08           <Image
                    09             source={require('../../../assets/chef.jpg')}
                    10             style={styles.imageBackground}
                    11           />
                    12           <View style={styles.logoContainer}>
                    13             <Image
                    14               source={require('../../../assets/logo.png')}
                    15               style={styles.logoImage}
                    16             />
                    17             <Text style={styles.logoText}>FOOD APP</Text>
                    18           </View>
                    19           <View style={styles.form}>
                    20             <Text style={styles.formText}>INGRESAR</Text>
                    21             <View style={styles.formInput}>
                    22               <Image style={styles.formIcon}
                    23                 source={require('../../../assets/email.png')}
                    24               />
                    25               <TextInput
                    26                 style={styles.formTextInput}
                    27                 placeholder='Correo electrónico'
                    28                 keyboardType='email-address'
                    29               />
                    30             </View>
                    31             <View style={styles.formInput}>
                    32               <Image style={styles.formIcon}
                    33                 source={require('../../../assets/password.png')}
                    34               />
                    35               <TextInput
                    36                 style={styles.formTextInput}
                    37                 placeholder='Contraseña'
                    38                 keyboardType='default'
                    39                 secureTextEntry={true}
                    40               />
                    41             </View>
                    42             <View style={{ marginTop: 30 }}>
                    43               <RoundedButton text='ENVIAR' onPress={() => ToastAndroid.show('¡HOLA!', ToastAndroid.SHORT)}/>
                    44             </View>
                    45             <View style={styles.formRegister}>
                    46               <Text>¿No tienes cuenta?</Text>
                    47               <Text style={styles.formRegisterText}>Regístrate</Text>
                    48             </View>
                    49           </View>
                    50         </View>
                    51       );
                    52   }
                    53
                    54   const styles = StyleSheet.create({
                    55     container: {
                    56       flex: 1,
                    57       backgroundColor: 'black',
                    58     },
                    59     imageBackground: {
                    60       width: '100%',
                    61       height: '100%',
                    62       opacity: 0.7,
                    63       bottom: '30%',
                    64     },
                    65     logoContainer: {
                    66       position: 'absolute',
                    67       alignSelf: 'center',
                    68       top: '15%',
                    69     },
                    70     logoImage: {
                    71       width: 100,
                    72       height: 100,
                    73     },
                    74     logoText: {
                    75       color: 'white',
                    76       textAlign: 'center',
                    77       fontSize: 20,
                    78       marginTop: 10,
                    79       fontWeight: 'bold',
                    80     },
                    81     form: {
                    82       width: '100%',
                    83       height: '40%',
                    84       backgroundColor: 'white',
                    85       position: 'absolute',
                    86       bottom: 0,
                    87       borderTopLeftRadius: 40,
                    88       borderTopRightRadius: 40,
                    89       padding: 30,
                    90     },
                    91     formText: {
                    92       fontWeight: 'bold',
                    93       fontSize: 16,
                    94     },
                    95     formIcon: {
                    96       width: 25,
                    97       height: 25,
                    98       marginTop: 5,
                    99     },
                   100     formInput: {
                   101       flexDirection: 'row',
                   102       marginTop: 30,
                   103     },
                   104     formTextInput: {
                   105       flex: 1,
                   106         borderBottomWidth: 1,
                   107         borderBottomColor: '#AAAAAA',
                   108         marginLeft: 15,
                   109     },
                   110     formRegister: {
                   111       flexDirection: 'row',
                   112       justifyContent: 'center',
                   113       marginTop: 20,
                   114     },
                   115     formRegisterText: {
                   116       fontStyle: 'italic',
                   117       color: 'orange',
                   118       borderBottomWidth: 1,
                   119       borderBottomColor: 'orange',
                   120       fontWeight: 'bold',
                   121       marginLeft: 10,
                   122     },
                   123   });

            04. Ir a la página https://reactnative.dev/docs/navigation, copiar el código del apartado 'Usage', pegarlo en el archivo 'App.tsx' en lugar
                del código original y reemplazar algunos nombres, quedando así:

                    01   import * as React from 'react';
                    02   import { NavigationContainer } from '@react-navigation/native';
                    03   import { createNativeStackNavigator } from '@react-navigation/native-stack';
                    04   import { HomeScreen } from './src/views/home/home';
                    05
                    06   const Stack = createNativeStackNavigator();
                    07
                    08   const App = () => {
                    09     return (
                    10       <NavigationContainer>
                    11         <Stack.Navigator screenOptions={{headerShown: false}}>
                    12           <Stack.Screen
                    13             name="Home"
                    14             component={HomeScreen}
                    15           />
                    16           {/* <Stack.Screen name="Profile" component={ProfileScreen} /> */}
                    17         </Stack.Navigator>
                    18        </NavigationContainer>
                    19     );
                    20   };
                    21
                    22   export default App;


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.03.  Pantalla de Registro: -----------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En la carpeta 'views' crear una carpeta 'register' y en ella un archivo 'Register.tsx' con el siguiente código:

                    01   import React from 'react'
                    02   import { View, Text } from 'react-native'
                    03
                    04   export const RegisterScreen = () => {
                    05     return (
                    06       <View style={{flex:1, justifyContent: 'center', alignItems: 'center'}}>
                    07         <Text>RegisterScreen</Text>
                    08       </View>
                    09     )
                    10   }


            02. En el archivo 'App.tsx' agregar el código para incluir la otra pantalla:

                    01   import * as React from 'react';
                    02   import { NavigationContainer } from '@react-navigation/native';
                    03   import { createNativeStackNavigator } from '@react-navigation/native-stack';
                    04   import { HomeScreen } from './src/views/home/home';
                    05   import { RegisterScreen } from './src/views/register/Register';
                    06
                    07   export type RootStackParamList = {
                    08     HomeScreen: undefined;
                    09     RegisterScreen: undefined;
                    10   }
                    11
                    12   const Stack = createNativeStackNavigator <RootStackParamList> ();
                    13
                    14   const App = () => {
                    15     return (
                    16       <NavigationContainer>
                    17         <Stack.Navigator screenOptions={{headerShown: false}}>
                    18           <Stack.Screen
                    19             name="HomeScreen"
                    20             component={HomeScreen}
                    21           />
                    22           <Stack.Screen
                    23             name="RegisterScreen"
                    24             component={RegisterScreen}
                    25             options={{
                    26               headerShown: true,
                    27               title: "Registro",
                    28             }}
                    29           />
                    30         </Stack.Navigator>
                    31       </NavigationContainer>
                    32     );
                    33   };
                    34
                    35   export default App;


            03. En la Terminal de 'Visual Studio Code' instalar el siguiente complemento para navegar entre pantallas:

                    ⦿   PS C:\..\react_native> npm i @react-navigation/stack

            04. En el archivo 'Home.tsx' agregar el 'import' de 'StackNavigationProp' y 'RootStackParamList'; además agregar la constante 'navigation':

                    01   import React from 'react';
                    02   import { StyleSheet, Text, View, Image, TextInput, Button, ToastAndroid } from 'react-native';
                    03   import { RoundedButton } from '../../componentes/RoundedButton';
                    04   import { StackNavigationProp } from '@react-navigation/stack';
                    05   import { RootStackParamList } from '../../../App';
                    06   import { useNavigation } from '@react-navigation/native';
                    07
                    08   export const HomeScreen = () => {
                    09
                    10     const navigation = useNavigation<StackNavigationProp<RootStackParamList>>();
                    11
                    12 >   return (
                    57     );
                    58   }
                    59
                    60 > const styles = StyleSheet.create({
                   129   });

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.04.  Componentes en la Pantalla de Registro: -----------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Reutilizar el código de la pantalla de 'Home.tsx' en 'Register.tsx' haciendo los cambios necesarios en los componentes y los estilos:

                    01   import React from 'react';
                    02   import { StyleSheet, Text, View, Image, TextInput, Button, ToastAndroid } from 'react-native';
                    03   import { RoundedButton } from '../../componentes/RoundedButton';
                    04   import { StackNavigationProp } from '@react-navigation/stack';
                    05   import { RootStackParamList } from '../../../App';
                    06   import { useNavigation } from '@react-navigation/native';
                    07
                    08   export const RegisterScreen = () => {
                    09
                    10     return (
                    11         <View style={styles.container}>
                    12           <Image
                    13             source={require('../../../assets/chef.jpg')}
                    14             style={styles.imageBackground}
                    15           />
                    16           <View style={styles.logoContainer}>
                    17             <Image
                    18               source={require('../../../assets/logo.png')}
                    19               style={styles.logoImage}
                    20             />
                    21             <Text style={styles.logoText}>SELECCIONA UNA IMÁGEN</Text>
                    22           </View>
                    23           <View style={styles.form}>
                    24             <Text style={styles.formText}>REGISTRARSE</Text>
                    25             <View style={styles.formInput}>
                    26               <Image style={styles.formIcon}
                    27                 source={require('../../../assets/user.png')}
                    28               />
                    29               <TextInput
                    30                 style={styles.formTextInput}
                    31                 placeholder='Nombres'
                    32                 keyboardType='default'
                    33               />
                    34             </View>
                    35             <View style={styles.formInput}>
                    36               <Image style={styles.formIcon}
                    37                 source={require('../../../assets/my_user.png')}
                    38               />
                    39               <TextInput
                    40                 style={styles.formTextInput}
                    41                 placeholder='Apellidos'
                    42                 keyboardType='default'
                    43               />
                    44             </View>
                    45             <View style={styles.formInput}>
                    46               <Image style={styles.formIcon}
                    47                 source={require('../../../assets/email.png')}
                    48               />
                    49               <TextInput
                    50                 style={styles.formTextInput}
                    51                 placeholder='Correo electrónico'
                    52                 keyboardType='email-address'
                    53               />
                    54             </View>
                    55             <View style={styles.formInput}>
                    56               <Image style={styles.formIcon}
                    57                 source={require('../../../assets/phone.png')}
                    58               />
                    59               <TextInput
                    60                 style={styles.formTextInput}
                    61                 placeholder='Teléfono'
                    62                 keyboardType='numeric'
                    63               />
                    64             </View>
                    65             <View style={styles.formInput}>
                    66               <Image style={styles.formIcon}
                    67                 source={require('../../../assets/password.png')}
                    68               />
                    69               <TextInput
                    70                 style={styles.formTextInput}
                    71                 placeholder='Contraseña'
                    72                 keyboardType='default'
                    73                 secureTextEntry={true}
                    74               />
                    75             </View>
                    76             <View style={styles.formInput}>
                    77               <Image style={styles.formIcon}
                    78                 source={require('../../../assets/confirm_password.png')}
                    79               />
                    80               <TextInput
                    81                 style={styles.formTextInput}
                    82                 placeholder='Confirmar Contraseña'
                    83                 keyboardType='default'
                    84                 secureTextEntry={true}
                    85               />
                    86             </View>
                    87             <View style={{ marginTop: 10 }}>
                    88               <RoundedButton text='CONFIRMAR' onPress={() => ToastAndroid.show('¡HOLA!', ToastAndroid.SHORT)}/>
                    89             </View>
                    90           </View>
                    91         </View>
                    92     );
                    93   }
                    94
                    95   const styles = StyleSheet.create({
                    96     container: {
                    97       flex: 1,
                    98       backgroundColor: 'black',
                    99     },
                   100     imageBackground: {
                   101       width: '100%',
                   102       height: '100%',
                   103       opacity: 0.7,
                   104       bottom: '30%',
                   105     },
                   106     logoContainer: {
                   107       position: 'absolute',
                   108       alignSelf: 'center',
                   109       top: '5%',
                   110       alignItems: 'center',
                   111     },
                   112     logoImage: {
                   113       width: 100,
                   114       height: 100,
                   115     },
                   116     logoText: {
                   117       color: 'white',
                   118       textAlign: 'center',
                   119       fontSize: 20,
                   120       marginTop: 10,
                   121       fontWeight: 'bold',
                   122     },
                   123     form: {
                   124       width: '100%',
                   125       height: '70%',
                   126       backgroundColor: 'white',
                   127       position: 'absolute',
                   128       bottom: 0,
                   129       borderTopLeftRadius: 40,
                   130       borderTopRightRadius: 40,
                   131       padding: 30,
                   132     },
                   133     formText: {
                   134       fontWeight: 'bold',
                   135       fontSize: 16,
                   136     },
                   137     formIcon: {
                   138       width: 25,
                   139       height: 25,
                   140       marginTop: 5,
                   141     },
                   142     formInput: {
                   143       flexDirection: 'row',
                   144       marginTop: 25,
                   145     },
                   146     formTextInput: {
                   147       flex: 1,
                   148         borderBottomWidth: 1,
                   149         borderBottomColor: '#AAAAAA',
                   150         marginLeft: 15,
                   150     },
                   152     formRegister: {
                   153       flexDirection: 'row',
                   154       justifyContent: 'center',
                   155       marginTop: 10,
                   156     },
                   157     formRegisterText: {
                   158       fontStyle: 'italic',
                   159       color: 'orange',
                   160       borderBottomWidth: 1,
                   161       borderBottomColor: 'orange',
                   162       fontWeight: 'bold',
                   163       marginLeft: 10,
                   164     },
                   165   });

            02. En el archivo 'App.tsx' comentar temporalmente las siguientes líneas de código para ver los resultados de 'Register.tsx':

                    18         {/* <Stack.Screen
                    19           name="HomeScreen"
                    20           component={HomeScreen}
                    21         /> */}

            NOTA:   ⦿   Si NO aprecia los cambios, en la Terminal de 'Visual Studio Code' donde se está ejecutando el servidor, presione la tecla 'r',
                         esto le permitirá recargar el proyecto.

                    ⦿   Descomente el código de 'App.tsx' cuando haya realizado la prueba para volver a la vista 'Home.tsx'.


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.05.  Captura de valores de los inputs: -----------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En el archivo 'Home.tsx' importar 'useState', importar constantes para cada campo del formulario, relacionar las constantes con los
                inputs del formulario y controlar los eventos:

                    01   import React, { useState } from 'react';
                    02   import { StyleSheet, Text, View, Image, TextInput, Button, ToastAndroid } from 'react-native';
                    03   import { RoundedButton } from '../../componentes/RoundedButton';
                    04   import { StackNavigationProp } from '@react-navigation/stack';
                    05   import { RootStackParamList } from '../../../App';
                    06   import { useNavigation } from '@react-navigation/native';
                    07
                    08   export const HomeScreen = () => {
                    09
                    10     const [email, setEmail] = useState('');
                    11     const [password, setPassword] = useState('');
                    12     const navigation = useNavigation<StackNavigationProp<RootStackParamList>>();
                    13
                    14     return (
                    15         <View style={styles.container}>
                    16           <Image
                    17             source={require('../../../assets/chef.jpg')}
                    18             style={styles.imageBackground}
                    19           />
                    20           <View style={styles.logoContainer}>
                    21             <Image
                    22               source={require('../../../assets/logo.png')}
                    23               style={styles.logoImage}
                    24             />
                    25             <Text style={styles.logoText}>FOOD APP</Text>
                    26           </View>
                    27           <View style={styles.form}>
                    28             <Text style={styles.formText}>INGRESAR</Text>
                    29             <View style={styles.formInput}>
                    30               <Image style={styles.formIcon}
                    31                 source={require('../../../assets/email.png')}
                    32               />
                    33               <TextInput
                    34                 style={styles.formTextInput}
                    35                 placeholder='Correo electrónico'
                    36                 keyboardType='email-address'
                    37                 value={email}
                    38                 onChangeText={ text => setEmail(text)}
                    39               />
                    40             </View>
                    41             <View style={styles.formInput}>
                    42               <Image style={styles.formIcon}
                    43                 source={require('../../../assets/password.png')}
                    44               />
                    45               <TextInput
                    46                 style={styles.formTextInput}
                    47                 placeholder='Contraseña'
                    48                 keyboardType='default'
                    49                 secureTextEntry={true}
                    50                 value={password}
                    51                 onChangeText={ text => setPassword(text)}
                    52               />
                    53             </View>
                    54             <View style={{ marginTop: 30 }}>
                    55               <RoundedButton text='ENVIAR' onPress={() => {
                    56                 console.log('Email: ' + email);
                    57                 console.log('Password: ' + password);
                    58               }}/>
                    59             </View>
                    60             <View style={styles.formRegister}>
                    61               <Text>¿No tienes cuenta?</Text>
                    62               <Text style={styles.formRegisterText}>Regístrate</Text>
                    63             </View>
                    64           </View>
                    65         </View>
                    66     );
                    67   }
                    68
                    69   const styles = StyleSheet.create({
                    70     container: {
                    71       flex: 1,
                    72       backgroundColor: 'black',
                    73     },
                    74     imageBackground: {
                    75       width: '100%',
                    76       height: '100%',
                    77       opacity: 0.7,
                    78       bottom: '30%',
                    79     },
                    80     logoContainer: {
                    81       position: 'absolute',
                    82       alignSelf: 'center',
                    83       top: '15%',
                    84     },
                    85     logoImage: {
                    86       width: 100,
                    87       height: 100,
                    88     },
                    89     logoText: {
                    90       color: 'white',
                    91       textAlign: 'center',
                    92       fontSize: 20,
                    93       marginTop: 10,
                    94       fontWeight: 'bold',
                    95     },
                    96     form: {
                    97       width: '100%',
                    98       height: '40%',
                    99       backgroundColor: 'white',
                   100       position: 'absolute',
                   101       bottom: 0,
                   102       borderTopLeftRadius: 40,
                   103       borderTopRightRadius: 40,
                   104       padding: 30,
                   105     },
                   106     formText: {
                   107       fontWeight: 'bold',
                   108       fontSize: 16,
                   109     },
                   110     formIcon: {
                   111       width: 25,
                   112       height: 25,
                   113       marginTop: 5,
                   114     },
                   115     formInput: {
                   116       flexDirection: 'row',
                   117       marginTop: 30,
                   118     },
                   119     formTextInput: {
                   120       flex: 1,
                   121         borderBottomWidth: 1,
                   122         borderBottomColor: '#AAAAAA',
                   123         marginLeft: 15,
                   124     },
                   125     formRegister: {
                   126       flexDirection: 'row',
                   127       justifyContent: 'center',
                   128       marginTop: 20,
                   129     },
                   130     formRegisterText: {
                   131       fontStyle: 'italic',
                   132       color: 'orange',
                   133       borderBottomWidth: 1,
                   134       borderBottomColor: 'orange',
                   135       fontWeight: 'bold',
                   136       marginLeft: 10,
                   137     },
                   138   });

            NOTA:   ⦿   Si todo va bien, en la terminal de 'Visual Studio Code' se mostrarán los valores digitados, al dar clic en el botón 'ENVIAR'.


|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------ 05. PATRÓN DE DISEÑO MVVM. ------------------------------------------------------------|||
|||-------------------------------------------------------------- CONVENCIONES DE GOOGLE --------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.01.  Capa de Presentación: -----------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Crear  en la carpeta 'src' la carpeta 'Presentation'.

            02. Detener el servidor ubicándose en la terminal de 'Visual Studio Code' y presionando 'CTRL + C':

            03. Arrastrar las carpetas 'components', 'theme' y 'views'; a la carpeta 'Presentation'.

            04. En 'App.tsx', actualizar las rutas de importación agregando la ruta 'Presentation':

                    04   import { HomeScreen } from './src/Presentation/views/home/home';
                    05   import { RegisterScreen } from './src/Presentation/views/register/Register';

            05. En 'Home.tsx', cambiar la ruta de importación en la línea 5 y las rutas a los recursos agregando '../':

                    05   import { RootStackParamList } from '../../../../App';

                    17             source={require('../../../../assets/chef.jpg')}
                    22               source={require('../../../../assets/logo.png')}
                    31                 source={require('../../../../assets/email.png')}
                    43                 source={require('../../../../assets/password.png')}

            06. En 'Register.tsx', cambiar la línea 5 y las rutas a los recursos agregando '../':

                    05   import { RootStackParamList } from '../../../../App';

                    13             source={require('../../../../assets/chef.jpg')}
                    18               source={require('../../../../assets/logo.png')}
                    27                 source={require('../../../../assets/user.png')}
                    37                 source={require('../../../../assets/my_user.png')}
                    47                 source={require('../../../../assets/email.png')}
                    57                 source={require('../../../../assets/phone.png')}
                    67                 source={require('../../../../assets/password.png')}
                    78                 source={require('../../../../assets/confirm_password.png')}

            07. En la terminal de 'Visual Studio Code' ejecute nuevamente el serivdor:

                    ⦿   PS C:\..\my-app> npm run android


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.02.  Capa de Dominio: ----------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Crear en la carpeta 'src' la carpeta 'Domain' y en su interior un archivo denominado 'delete.txt' (Después se elimina).


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.03.  Capa de Datos: ------------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Crear en la carpeta 'src' la carpeta 'Data' y en su interior un archivo denominado 'delete.txt' (Después se elimina).

            02. En la carpeta 'src/Presentation/views/home', crear el archivo 'ViewModel.tsx' para pasar los 'userState' de la vista 'home.tsx'. El
                archivo 'ViewModel' quedará así:

                    01   import React, { useState } from 'react';
                    02
                    03   const HomeViewModel = () => {
                    04       const [values, setValues] = useState({
                    05           email: '',
                    06           password: '',
                    07       });
                    08       const onChange = (property: string, value: any) => {
                    09           setValues({
                    10               ...values, [property]: value
                    11           });
                    12       }
                    13       return {
                    14           ...values,
                    15           onChange
                    16       }
                    17   }
                    18
                    19   export default HomeViewModel;

            03. En 'Home.tsx', modificar el código para importar la 'useViewModel' de 'ViewModel' y modificar los <TextInput>:

                    07   import useViewModel from './ViewModel';

                    11   const {email, password, onChange} = useViewModel();
                    12   const navigation = useNavigation<StackNavigationProp<RootStackParamList>>();

                    38               onChangeText={text => onChange('email', text)}
                    51               onChangeText={text => onChange('password', text)}


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.04.  Componente personalizado para los inputs: ---------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En la carpeta 'components' crear un archivo 'CustomTextInput.tsx', generar código con 'rafc' y modificar así::

                    01   import React from 'react';
                    02   import { StyleSheet, View, Image, TextInput, KeyboardType } from 'react-native';
                    03
                    04   interface Props {
                    05       image: any;
                    06       placeholder: string;
                    07       value: string;
                    08       keyboardType: KeyboardType;
                    09       secureTextEntry?: boolean;
                    10       property: string, onChangeText: (property: string, value:any) => void,
                    11   }
                    12
                    13   export const CustomTextInput = ({
                    14       image,
                    15       placeholder,
                    16       value,
                    17       keyboardType,
                    18       secureTextEntry = false,
                    19       property,
                    20       onChangeText
                    21   }: Props) => {
                    22     return (
                    23       <View style = { styles.formInput }>
                    24           <Image style = { styles.formIcon } source = { image } />
                    25           <TextInput style = { styles.formTextInput }
                    26               placeholder = { placeholder }
                    27               keyboardType = { keyboardType }
                    28               value = { value }
                    29               onChangeText = { text => onChangeText(property, text) }
                    30               secureTextEntry = { secureTextEntry }
                    31           />
                    32       </View>
                    33     )
                    34   }
                    35
                    36   const styles = StyleSheet.create({
                    37       formIcon: {
                    38           width: 25,
                    39           height: 25,
                    40           marginTop: 5,
                    41       },
                    42       formInput: {
                    43           flexDirection: 'row',
                    44           marginTop: 25,
                    45       },
                    46       formTextInput: {
                    47           flex: 1,
                    48           borderBottomWidth: 1,
                    49           borderBottomColor: '#AAAAAA',
                    50           marginLeft: 15,
                    51       }
                    52   })

            02. En 'Home.tsx', modificar el código para importar 'CustomTextInput' e implementarlo, quedando el código así:

                    01   import React, { useState } from 'react';
                    02   import { StyleSheet, Text, View, Image, TextInput, ToastAndroid, TouchableOpacity } from 'react-native';
                    03   import { RoundedButton } from '../../componentes/RoundedButton';
                    04   import { StackNavigationProp } from '@react-navigation/stack';
                    05   import { RootStackParamList } from '../../../../App';
                    06   import { useNavigation } from '@react-navigation/native';
                    07   import { CustomTextInput } from '../../componentes/CustomTextInput';
                    08   import  useViewModel  from './ViewModel';
                    09
                    10   export const HomeScreen = () => {
                    11
                    12     const {email, password, onChange} = useViewModel();
                    13     const navigation = useNavigation<StackNavigationProp<RootStackParamList>>();
                    14
                    15     return (
                    16         <View style={styles.container}>
                    17           <Image
                    18             source={require('../../../../assets/chef.jpg')}
                    19             style={styles.imageBackground}
                    20           />
                    21           <View style={styles.logoContainer}>
                    22             <Image
                    23               source={require('../../../../assets/logo.png')}
                    24               style={styles.logoImage}
                    25             />
                    26             <Text style={styles.logoText}>FOOD APP</Text>
                    27           </View>
                    28           <View style={styles.form}>
                    29             <Text style={styles.formText}>INGRESAR</Text>
                    30             <CustomTextInput
                    31               image = {require('../../../../assets/email.png')}
                    32               placeholder = 'Correo Electrónico'
                    33               keyboardType = 'email-address'
                    34               property = 'email'
                    35               onChangeText = { onChange }
                    36               value = {email}
                    37             />
                    38             <CustomTextInput
                    39               image = {require('../../../../assets/password.png')}
                    40               placeholder = 'Contraseña'
                    41               keyboardType = 'default'
                    42               property = 'password'
                    43               onChangeText = { onChange }
                    44               value = {password}
                    45               secureTextEntry = { true }
                    46             />
                    47             <View style={{ marginTop: 30 }}>
                    48               <RoundedButton text='ENVIAR' onPress={() => {
                    49                 console.log('Email: ' + email);
                    50                 console.log('Password: ' + password);
                    51               }}/>
                    52             </View>
                    53             <View style={styles.formRegister}>
                    54               <Text>¿No tienes cuenta?</Text>
                    55               <TouchableOpacity onPress={ () => navigation.navigate('RegisterScreen') }>
                    56                 <Text style={styles.formRegisterText}>Regístrate</Text>
                    57               </TouchableOpacity>
                    58             </View>
                    59           </View>
                    60         </View>
                    61     );
                    62   }
                    63
                    64 > const styles = StyleSheet.create({
                   133   });


            03. Crear un archivo 'ViewModel.tsx' en la carpeta 'register' y agregar el siguiente código:

                    01   import React, { useState } from 'react';
                    02
                    03   const RegisterViewModel = () => {
                    04       const [values, setValues] = useState({
                    05           name: '',
                    06           lastname: '',
                    07           phone: '',
                    08           email: '',
                    09           password: '',
                    10           confirmPassword: '',
                    11       });
                    12       const onChange = (property: string, value: any) => {
                    13           setValues({ ...values, [property]: value });
                    14       };
                    15       const register = () => {
                    16           console.log(JSON.stringify(values));
                    17       };
                    18       return {
                    19         ...values,
                    20         onChange,
                    21         register
                    22       };
                    23   }
                    24
                    25   export default RegisterViewModel;


            04. Modificar el archivo 'Register.tsx', quedando así:

                    01   import React from 'react';
                    02   import { StyleSheet, Text, View, Image, TextInput, ToastAndroid } from 'react-native';
                    03   import { RoundedButton } from '../../componentes/RoundedButton';
                    04   import { CustomTextInput } from '../../componentes/CustomTextInput';
                    05   import useViewModel from './ViewModel';
                    06
                    07   export const RegisterScreen = () => {
                    08
                    09     const {name, lastname, phone, email, password, confirmPassword, onChange, register} = useViewModel();
                    10
                    11     return (
                    12       <View style={styles.container}>
                    13           <Image
                    14             source={require('../../../../assets/chef.jpg')}
                    15             style={styles.imageBackground}
                    16           />
                    17           <View style={styles.logoContainer}>
                    18             <Image
                    19               source={require('../../../../assets/logo.png')}
                    20               style={styles.logoImage}
                    21             />
                    22             <Text style={styles.logoText}>FOOD APP</Text>
                    23           </View>
                    24           <View style={styles.form}>
                    25             <Text style={styles.formText}>REGÍSTRATE</Text>
                    26             <CustomTextInput
                    27               image = {require('../../../../assets/user.png')}
                    28               placeholder = 'Nombres'
                    29               keyboardType = 'default'
                    30               property = 'name'
                    31               onChangeText = { onChange }
                    32               value = { name }
                    33             />
                    34             <CustomTextInput
                    35               image = {require('../../../../assets/my_user.png')}
                    36               placeholder = 'Apellidos'
                    37               keyboardType = 'default'
                    38               property = 'lastname'
                    39               onChangeText = { onChange }
                    40               value = { lastname }
                    41             />
                    42             <CustomTextInput
                    43               image = {require('../../../../assets/email.png')}
                    44               placeholder = 'Correo Electrónico'
                    45               keyboardType = 'email-address'
                    46               property = 'email'
                    47               onChangeText = { onChange }
                    48               value = { email }
                    49             />
                    50             <CustomTextInput
                    51               image = {require('../../../../assets/phone.png')}
                    52               placeholder = 'Teléfono'
                    53               keyboardType = 'numeric'
                    54               property = 'phone'
                    55               onChangeText = { onChange }
                    56               value = { phone }
                    57             />
                    58             <CustomTextInput
                    59               image = {require('../../../../assets/password.png')}
                    60               placeholder = 'Contraseña'
                    61               keyboardType = 'default'
                    62               property = 'password'
                    63               onChangeText = { onChange }
                    64               value = { password }
                    65               secureTextEntry = { true }
                    66             />
                    67             <CustomTextInput
                    68               image = {require('../../../../assets/confirm_password.png')}
                    69               placeholder = 'Confirmar Contraseña'
                    70               keyboardType = 'default'
                    71               property = 'confirmPassword'
                    72               onChangeText = { onChange }
                    73               value = { confirmPassword }
                    74               secureTextEntry = { true }
                    75             />
                    76             <View style={{ marginTop: 10 }}>
                    77               <RoundedButton text='CONFIRMAR' onPress={ () => register() } />
                    78             </View>
                    79           </View>
                    80         </View>
                    81     );
                    82   }
                    83
                    84 > const styles = StyleSheet.create({
                   154   });



|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.05.  Separar las hojas de estilos: ---------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En la carpeta 'home' crear un archivo 'Styles.tsx'.

            02. Del el archivo 'Home.tsx' cortar los estilos y pegarlos en 'Styles.tsx', quedando así:

                    01   import { StyleSheet } from "react-native";
                    02
                    03   const HomeStyles = StyleSheet.create({
                    04     container: {
                    05       flex: 1,
                    06       backgroundColor: 'black',
                    07     },
                    08     imageBackground: {
                    09       width: '100%',
                    10       height: '100%',
                    11       opacity: 0.7,
                    12       bottom: '30%',
                    13     },
                    14     logoContainer: {
                    15       position: 'absolute',
                    16       alignSelf: 'center',
                    17       top: '15%',
                    18     },
                    19     logoImage: {
                    20       width: 100,
                    21       height: 100,
                    22     },
                    23     logoText: {
                    24       color: 'white',
                    25       textAlign: 'center',
                    26       fontSize: 20,
                    27       marginTop: 10,
                    28       fontWeight: 'bold',
                    29     },
                    30     form: {
                    31       width: '100%',
                    32       height: '40%',
                    33       backgroundColor: 'white',
                    34       position: 'absolute',
                    35       bottom: 0,
                    36       borderTopLeftRadius: 40,
                    37       borderTopRightRadius: 40,
                    38       padding: 30,
                    39     },
                    40     formText: {
                    41       fontWeight: 'bold',
                    42       fontSize: 16,
                    43     },
                    44     formIcon: {
                    45       width: 25,
                    46       height: 25,
                    47       marginTop: 5,
                    48     },
                    49     formInput: {
                    50       flexDirection: 'row',
                    51       marginTop: 30,
                    52     },
                    53     formTextInput: {
                    54       flex: 1,
                    55         borderBottomWidth: 1,
                    56         borderBottomColor: '#AAAAAA',
                    57         marginLeft: 15,
                    58     },
                    59     formRegister: {
                    60       flexDirection: 'row',
                    61       justifyContent: 'center',
                    62       marginTop: 20,
                    63     },
                    64     formRegisterText: {
                    65       fontStyle: 'italic',
                    66       color: 'orange',
                    67       borderBottomWidth: 1,
                    68       borderBottomColor: 'orange',
                    69       fontWeight: 'bold',
                    70       marginLeft: 10,
                    71     },
                    72   });
                    73
                    74   export default HomeStyles;

            03. En 'Home.tsx', importar los estilos en la línea 09:

                    09   import styles from './Styles';

            04. En la carpeta 'register' crear un archivo 'Styles.tsx'.

            05. Del el archivo 'Register.tsx' cortar los estilos y pegarlos en 'Styles.tsx', quedando así:

                    01   import { StyleSheet } from "react-native";
                    02
                    03   const RegisterStyles = StyleSheet.create({
                    04     container: {
                    05       flex: 1,
                    06       backgroundColor: 'black',
                    07     },
                    08     imageBackground: {
                    09       width: '100%',
                    10       height: '100%',
                    11       opacity: 0.7,
                    12       bottom: '30%',
                    13     },
                    14     logoContainer: {
                    15       position: 'absolute',
                    16       alignSelf: 'center',
                    17       top: '5%',
                    18       alignItems: 'center',
                    19     },
                    20     logoImage: {
                    21       width: 100,
                    22       height: 100,
                    23     },
                    24     logoText: {
                    25       color: 'white',
                    26       textAlign: 'center',
                    27       fontSize: 20,
                    28       marginTop: 10,
                    29       fontWeight: 'bold',
                    30     },
                    31     form: {
                    32       width: '100%',
                    33       height: '70%',
                    34       backgroundColor: 'white',
                    35       position: 'absolute',
                    36       bottom: 0,
                    37       borderTopLeftRadius: 40,
                    38       borderTopRightRadius: 40,
                    39       padding: 30,
                    40     },
                    41     formText: {
                    42       fontWeight: 'bold',
                    43       fontSize: 16,
                    44     },
                    45     formIcon: {
                    46       width: 25,
                    47       height: 25,
                    48       marginTop: 5,
                    49     },
                    50     formInput: {
                    51       flexDirection: 'row',
                    52       marginTop: 25,
                    53     },
                    54     formTextInput: {
                    55       flex: 1,
                    56         borderBottomWidth: 1,
                    57         borderBottomColor: '#AAAAAA',
                    58         marginLeft: 15,
                    59     },
                    60     formRegister: {
                    61       flexDirection: 'row',
                    62       justifyContent: 'center',
                    63       marginTop: 10,
                    64     },
                    65     formRegisterText: {
                    66       fontStyle: 'italic',
                    67       color: 'orange',
                    68       borderBottomWidth: 1,
                    69       borderBottomColor: 'orange',
                    70       fontWeight: 'bold',
                    71       marginLeft: 10,
                    72     },
                    73   });
                    74
                    75   export default RegisterStyles;


            06. En 'Register.tsx', importar los estilos en la línea 07:

                    07   import styles from './Styles';



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||--------------------------------------------------------- 06. MONTANDO UN SERVIDOR NODE JS ---------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 06.01.  Crear el Servidor: ---------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Crear la carpeta 'node_js' fuera del proyecto 'my-app'.

            02. Abrir otra Terminal en 'Visual Studio Code' y digitar los siguientes comandos:

                    ⦿   PS C:\..\> cd node_js
                    ⦿   PS C:\..\node_js> npm init
                         This utility will walk you through creating a package.json file.
                         It only covers the most common items, and tries to guess sensible defaults.

                         See `npm help init` for definitive documentation on these fields
                         and exactly what they do.

                         Use `npm install <pkg>` afterwards to install a package and
                         save it as a dependency in the package.json file.

                         Press ^C at any time to quit.
                         package name: (node_js) nodejs
                         version: (1.0.0)
                         description: Backend de la app de prueba 'my-app' de React Native
                         entry point: (index.js) server.js
                         test command:
                         git repository:
                         keywords: ReactNative NodeJs
                         author: Instructor Albeiro Ramos
                         license: (ISC) MIT
                         About to write to C:\Users\Instructor\Documents\_albe_\react_native\node_js\package.json:

                         {
                           "name": "nodejs",
                           "version": "1.0.0",
                           "description": "Backend de la app de prueba 'my-app' de React Native",
                           "main": "server.js",
                           "scripts": {
                             "test": "echo \"Error: no test specified\" && exit 1"
                           },
                           "keywords": [
                             "ReactNative",
                             "NodeJs"
                           ],
                           "author": "Instructor Albeiro Ramos",
                           "license": "MIT"
                         }


                         Is this OK? (yes) yes

                    ⦿   PS C:\..\node_js> npm i express
                    ⦿   PS C:\..\node_js> npm i http

            03. En la carpeta 'node_js' crear un archivo denominado 'server.js' y escribir el siguiente código:

                    01   const express = require('express');
                    02   const app = express();
                    03   const http = require('http');
                    04   const server = http.createServer(app);
                    05
                    06   const port = process.env.PORT || 3000;
                    07
                    08   app.set('port', port);
                    09
                    10   server.listen(3000, '192.168.137.1' || 'localhost', function(){
                    11       console.log('Aplicación de node.js ' + process.pid + ' inicio en el puerto ' + port);
                    12   });

            04. En la Terminal de 'Visual Studio Code' digitar el siguiente comando para ejecutar el servidor:

                    ⦿   PS C:\..\node_js> node server.js

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 06.02.  Prueba de Rutas del Servidor: ---------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En la Terminal de 'Visual Studio Code' presionar 'CTRL + C' para detener el servidor y digitar los siguientes comandos para ejecutar
                'cors' y 'morgan' en el servidor:

                    ⦿   PS C:\..\node_js> npm i cors
                    ⦿   PS C:\..\node_js> npm i morgan

            02. Modificar el archivo 'server.js' de la siguiente forma:

                    01   const express = require('express');
                    02   const app = express();
                    03   const http = require('http');
                    04   const server = http.createServer(app);
                    05   const logger = require('morgan');
                    06   const cors = require('cors');
                    07
                    08   const port = process.env.PORT || 3000;
                    09   app.use(logger('dev'));
                    10   app.use(express.json());
                    11   app.use(express.urlencoded({ extended: true }));
                    12   app.use(cors());
                    13   app.disable('x-powered-by');
                    14
                    15   app.set('port', port);
                    16
                    17   server.listen(3000, '192.168.137.1' || 'localhost', function(){
                    18     console.log('Aplicación de node.js ' + process.pid + ' inicio en el puerto ' + port);
                    19   });
                    20
                    21   app.get('/', (req, res) => {
                    22     res.send('Ruta raíz del Backend');
                    23   });
                    24
                    25   app.use((err, req, resp, next) => {
                    26     console.log(err);
                    27     res.status(err.status || 500).send(err.stack);
                    28   });

            03. En la Terminal de 'Visual Studio Code' digitar el siguiente comando para ejecutar el servidor:

                    ⦿   PS C:\..\node_js> node server.js

            04. Abrir 'Postman', escribir la dirección ip y el puerto, por ejemplo:

                    ⦿   192.168.137.1:3000
                    ⦿   La Respuesta de 'Postman' será: 'Ruta raíz del Backend'


|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||---------------------------------------------------- 07. CONECTANDO A LA BASE DE DATOS (MYSQL) -----------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 07.01.  Creando la base de datos 'MySql': -----------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Crear en la carpeta 'node_js' una con el nombre 'db' y en su interior un archivo denominado 'nodejs_base1.sql'. El código del archivo
                es el siguiente:

                    01   CREATE SCHEMA nodejs_base1 DEFAULT CHARACTER SET utf8 ;
                    02   USE nodejs_base1;
                    03
                    04   CREATE TABLE users (
                    05     id BIGINT NOT NULL AUTO_INCREMENT,
                    06     email VARCHAR(180) NOT NULL UNIQUE,
                    07     name VARCHAR(90) NOT NULL,
                    08     lastname VARCHAR(90) NOT NULL,
                    09     phone VARCHAR(90) NOT NULL UNIQUE,
                    10     image VARCHAR(255) NULL,
                    11     password VARCHAR(90) NOT NULL,
                    12     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    13     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    14     PRIMARY KEY (id)
                    15   ) ENGINE=InnoDB;

            02. En 'Workbench' o en 'phpMyAdmin' ejecutar el código anterior para crear la base de datos.


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 07.02.  Realizando la conexión desde Node.js: -------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En la Terminal de 'Visual Studio Code' presionar 'CTRL + C' para detener el servidor y digitar el siguiente comando para instalar la
                dependencia a la DB:

                    ⦿   PS C:\..\node_js> npm i mysql

            02. Crear en la carpeta 'node_js' una 'config' y en su interior un archivo denominado 'config.js'. El código del archivo es el siguiente:

                    01   const mysql = require('mysql');
                    02   const db = mysql.createConnection({
                    03     host: 'localhost',
                    04     user: 'root',
                    05     password: '',
                    06     database: 'nodejs_base1'
                    07     port: 3307
                    08   });
                    09
                    10   db.connect(function(err) {
                    11     if (err) throw err;
                    12     console.log('Base de datos conectada')
                    13   });
                    14
                    15   module.exports = db;

            03. Crear en la 'node_js' una carpeta 'models' y en su interior un archivo denominado 'user.js'. El código del archivo es el siguiente:

                    01   const db = require('../config/config');
                    02   const User = {
                    03     create: (user, result) => {
                    04       const sql = `INSERT INTO USERS(
                    05                     email,
                    06                     name,
                    07                     lastname,
                    08                     phone,
                    09                     image,
                    10                     password,
                    11                     created_at,
                    12                     updated_at
                    13                   ) VALUES (?,?,?,?,?,?,?,?)`;
                    14       db.query(
                    15         sql,
                    16         [
                    17           user.email,
                    18           user.name,
                    19           user.lastname,
                    20           user.phone,
                    21           user.image,
                    22           user.password,
                    23           new Date(),
                    24           new Date()
                    25         ],
                    26         (err, res) => {
                    27           if (err) {
                    28             console.log('error: ', err);
                    29             result(err, null);
                    30           } else {
                    31             console.log('Id del nuevo usuario: ', res.insertId);
                    32             result(err, res.insertId);
                    33           }
                    34         }
                    35       )
                    36     }
                    37   };
                    38
                    39   module.exports = User;

            04. Crear en la 'node_js' una carpeta 'controllers' y en su interior un archivo denominado 'userController.js'. El código del archivo es
                el siguiente:

                    01   const User = require('../models/user');
                    02
                    03   module.exports = {
                    04     register(req, res) {
                    05       const user = req.body;
                    06       User.create(user, (err, data) => {
                    07         if (err) {
                    08           return res.status(501).json ({
                    09             success: false,
                    10             message: 'Error al crear al usuario',
                    11             error: err
                    12           });
                    13         } else {
                    14           return res.status(201).json({
                    15             success: true,
                    16             message: 'Creado el Usuario',
                    17             data: data
                    18           });
                    19         }
                    20       });
                    21     }
                    22   }

            05. Crear en la 'node_js' una carpeta 'routes' y en su interior un archivo denominado 'userRoutes.js'. El código del archivo es
                el siguiente:

                    01   const userController = require('../controllers/userController');
                    02
                    03   module.exports = (app) => {
                    04     app.post('/api/users/create', userController.register);
                    05   }

            06. En el archivo 'server.js', importar las rutas quedando el código así:

                    01   const express = require('express');
                    02   const app = express();
                    03   const http = require('http');
                    04   const server = http.createServer(app);
                    05   const logger = require('morgan');
                    06   const cors = require('cors');
                    07
                    08   const users = require('./routes/userRoutes');
                    09
                    10   const port = process.env.PORT || 3000;
                    11   app.use(logger('dev'));
                    12   app.use(express.json());
                    13   app.use(express.urlencoded({ extended: true }));
                    14   app.use(cors());
                    15   app.disable('x-powered-by');
                    16
                    17   app.set('port', port);
                    18
                    19   users(app);
                    20
                    21   server.listen(3000, '10.1.204.112' || 'localhost', function(){
                    22     console.log('Aplicación de node.js ' + process.pid + ' inicio en el puerto ' + port);
                    23   });
                    24
                    25   app.get('/', (req, res) => {
                    26     res.send('Ruta raíz del Backend');
                    27   });
                    28
                    29   app.use((err, req, resp, next) => {
                    30     console.log(err);
                    31     res.status(err.status || 500).send(err.stack);
                    32   });

            07. En la Terminal de 'Visual Studio Code' presionar 'CTRL + C' para detener el servidor y volver a ejecutarlo:

                    ⦿   PS C:\..\node_js> npm install morgan
                    ⦿   PS C:\..\node_js> node server.js
                         Aplicación de node.js 16284 inicio en el puerto 3000
                         Base de datos conectada

            NOTA:   ⦿   Si aparece el siguiente error: "sqlMessage: 'Client does not support authentication protocol requested by server; consider
                         upgrading MySQL client',"; en MySQL Workbench (o phpMyAdmin), seleccione la DB y ejecute los comandos:

                         -- reemplazar 'username' y 'password' por el nombre de usuario y contraseña de la DB
                         ALTER USER 'username'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';
                         FLUSH PRIVILEGES;


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 07.03.  Creando un Usuario: -------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir 'Postman', realizar una petición 'POST' para crear un registro de usuario de la siguiente forma:

                    ⦿   Cambiar al método 'POST'

                    ⦿   Escribir el siguiente 'EndPoint': 10.1.204.112:3000/api/users/create.

            NOTA:   ⦿   Recuerde modificar la dirección IP para su aplicación

                    ⦿   Seleccionar: 'Body / raw / JSON' y escribir el siguiente código en formato JSON:

                          01   {
                          02       "email": "micorreo@gmail.com",
                          03       "name": "Pedro Nel",
                          04       "lastname": "Dominguez",
                          05       "phone": "741852",
                          06       "image": "yyyy",
                          07       "password": "9876546"
                          08   }

                    ⦿   Clic a 'Send'

                    ⦿   La respuesta debe ser la siguiente:

                          01   {
                          02       "success": true,
                          03       "message": "Creado el Usuario",
                          04       "data": 1
                          05   }

                    ⦿   Verificar en la DB que se haya creado el usuario.


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 07.04.  Creando Usuarios desde la App: --------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En la Terminal de 'Visual Studio Code' presionar 'CTRL + C' para detener el servidor de 'my-app' e instalar Axios:

                    ⦿   PS C:\..\node_js> npm i axios

            02. En la carpeta 'my-app/src/Data' crear las siguientes carpetas y archivos:

                    my-app/
                    └── src/
                        └── Data/
                            └── sources/                        #   Nueva carpeta.
                                └── remote/                     #   Nueva carpeta.
                                    └── api/                    #   Nueva carpeta.
                                        └── ApiDelivery.tsx     #   Nuevo archivo.

            NOTA:   ⦿   No olvide eliminar el archivo 'delete.txt'

            03. En el archivo 'ApiDelivery.tsx', digite el siguiente código:

                    01   import axios from "axios";
                    02
                    03   const ApiDelivery = axios.create({
                    04     baseURL: 'http://192.168.137.1:3000/api',
                    05     headers: {
                    06       'Content-Type': 'application/json'
                    07     }
                    08   });
                    09
                    10   export { ApiDelivery }

            04. En el archivo “ViewModel.tsx” de la carpeta 'my-app/src/Presentation/views/register' importar ApiDelivery y modificar 'register',
                quedando el código como sigue:

                    01   import React, { useState } from 'react';
                    02   import { ApiDelivery } from '../../../Data/sources/remote/api/apiDelivery';
                    03
                    04   const RegisterViewModel = () => {
                    05       const [values, setValues] = useState({
                    06         name: '',
                    07         lastname: '',
                    08         phone: '',
                    09         email: '',
                    10         password: '',
                    11         confirmPassword: '',
                    12       });
                    13       const onChange = (property: string, value: any) => {
                    14         setValues({ ...values, [property]: value });
                    15       };
                    16       const register = async () => {
                    17         try {
                    18           const response = await ApiDelivery.post('/users/create', values);
                    19           console.log('RESPONSE: ' + JSON.stringify(response));
                    20         } catch (error) {
                    21           console.log('Error: ' + error);
                    22         }
                    23       };
                    24       return {
                    25         ...values,
                    26         onChange,
                    27         register
                    28       };
                    29   }
                    30
                    31   export default RegisterViewModel;

            05. En la Terminal de 'Visual Studio Code' presionar 'CTRL + C' en cada uno de los servidores ('my-app' y 'node_js') para detenerlos,
                volverlos a ejecutar y crear un nuevo usuario desde la 'app'.



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||--------------------------------------------------------- 08. AJUSTANDO EL PROYECTO A MVVM ---------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

            https://github.com/ProfeAlbeiro/react_native/blob/main/sources/img/paso_a_paso/08/arquitectura_mvvm.png

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 08.01.  Ajustar el Dominio: -------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En la carpeta 'my-app/src/Domain' crear las siguientes carpetas y archivos:

                    my-app/
                    └── src/
                        └── Domain/
                            ├── entities/                        #   Nueva carpeta.
                            │   └── User.tsx                     #   Nuevo archivo.
                            └── useCases/                        #   Nueva carpeta.
                                └── auth/                        #   Nueva carpeta.
                                    └── RegisterAuth.tsx         #   Nuevo archivo.

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 08.02.  Ajustes a la pantallas para mejorar la presentación: ----------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|




|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 08.03.  Ajustar la Interface: -----------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|




|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 08.04.  Estructura de carpetas del proyecto: --------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|




|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 08.05.  Organización de los módulos de código: ------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|




|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 08.06.  Validaciones en los formularios: ------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||---------------------------------------------------------------- 09. JSON WEB TOKEN ----------------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 09.01.  Configuración del Back-end para generar el Token: -------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|






|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 09.02.  Enviando el login desde la App: -------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|





|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 09.03.  Almacenamiento interno de la sesión del usuario: --------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|




|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||----------------------------------------------------------------- 10. CUSTOM HOOKS -----------------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 10.01.  Implementación del Custom Hook: -------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|



|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 10.02.  Navegar usando Custom Hook: -----------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|



|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 10.03.  Cerrar la Sesión: ---------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|






|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------ 11. DESPLEGAR EL PROYECTO -------------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 11.01. Cuando NO está preparado el Entorno de Desarrollo: -------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|




|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 11.01. Cuando YA está preparado el Entorno de Desarrollo: -------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir el proyecto con 'Visual Studio Code'. Ejemplo: 'my-app'.

            02. Abrir una terminal en 'Visual Studio Code' y ejecutar los siguientes comandos:

                    ⦿   PS C:\..> cd my-app
                    ⦿   PS C:\..\my-app> npm install
                    ⦿   PS C:\..\my-app> npm run android

            03. Abrir otra terminal en 'Visual Studio Code' y ejecutar los siguientes comandos:

                    ⦿   PS C:\..> cd node_js
                    ⦿   PS C:\..\node_js> npm install
                    ⦿   PS C:\..\node_js> node server.js